<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=no">
		<title>XYZ Maps Example: Confirm changes</title>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js" type="text/javascript"></script>

	   	<script src="${XYZ_COMMON_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_CORE_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_DISPLAY_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_EDITOR_PATH}" type="text/javascript" charset="UTF-8" ></script>


		<style type="text/css">
			#map {
				position: absolute;
            	overflow: hidden;
				top: 0;
				left: 0;
				width: 100%;
                height: 100%;
			}
			.contextmenu {
				position: absolute;
				background: #fff;
				z-index: 2000;
				border: 3px solid #CDCDCD;
				list-style: none outside none;
				padding: 5px;
				border-radius: 3px 3px 3px 3px;
				box-shadow: 0 0 15px #999999;
				color: #373D49;
			}
			.contextmenu li {
				cursor: pointer;
			}
			.contextmenu li:hover {
				background: #eee;
			}
		</style>
	</head>
	<body>
		<div id="map"></div>
		<script>
		// specify credentials
      	var YOUR_ACCESS_TOKEN = window.parent.YOUR_ACCESS_TOKEN;


		// Create a custom provider.
		class MyProvider extends here.xyz.maps.providers.SpaceProvider {
			// In this examle, we expect all features are Navlinks.
			detectFeatureClass(feature) {
				return 'NAVLINK';
			}


			// ########################       Navlink      ########################
			// Following functions are only necessary if you want to edit Navlink.


			// In addition to Lines, Navlinks have navigation information and are connected to each other to form a road network.
			// Implementing following functions enables you to easily edit Navlinks.


			// This function returns a boolean value to indicate if turn from from-link's shape point to to-link's shape point
			// is restricted.
			// It takes two arguments ('from' and 'to' in this example), they have the same data structure:
			// {
			//     'link': Navlink,
			//     'index': Number
			// }
			// 'link': Navlink to turn from and into.
			// 'index': index of Navlink's shape point, it specifies the shape point where turn takes place.
			// In this example, turn restriction information is stored in from-link, we read this information and determin if the
			// turn is restricted.
			readTurnRestriction(from, to) {
				let turn = from.link.prop('turnRestriction') || {};
				// first shape point is 'start' and the last one is 'end'
				let restrictions = turn[from.index ? 'end' : 'start'] || [];

				return restrictions.indexOf(to.link.id) >= 0;
			};

			// This function stores turn restriction information for turn from from-link to to-link.
			// It takes arguments ('restricted', 'from' and 'to' in this example) similar to that of above function, but its first
			// argument is a boolean value for indicating the turn is (or is not) restricted.
			// In this example, we store turn restriction information as following object in from-link:
			// {
			//     'start': Array<String>  // Array of Navlink id
			//     'end': Array<String>    // Array of Navlink id
			// }
			// 'start' and 'end' refer to first and last shape point of from-link.
			// Their values are array of Navlink ids, you are not allowed to turn from from-link's start (or end) shape point into
			// any Navlink that is in this array.
			writeTurnRestriction(restricted, from, to) {
				let turn = from.link.prop('turnRestriction') || {};
				let node = from.index ? 'end' : 'start';
				let restrictions = turn[node] = turn[node] || [];
				let index = restrictions.indexOf(to.link.id);

				if (restricted) {
					if (index == -1) {
						restrictions.push(to.link.id);
					}
				} else if (index >= 0) {
					restrictions.splice(index, 1);
				}

				from.link.prop('turnRestriction', turn);
			}

			// Indicate if the Navlink is pedestrian only, it's not allowed to turn into a pedestrian only Navlink.
			readPedestrianOnly(feature) {
				return Boolean(feature.prop('pedestrianOnly'));
			}

			// Navlink's direction indicates if the Navlink is a one-way road.
			// Valid values are:
			// 'BOTH': the Navlink is a two-way road.
			// 'START_TO_END': the Navlink is a one-way road with travel direction from its first to last shape point.
			// 'END_TO_START': the Navlink is a one-way road with travel direction from its last to first shape point.
			// It's not allowed to turn into one Navlink with direction 'END_TO_START' at its start (first) shape point or turn into
			// one Navlink with direction 'START_TO_END' at its end (last) shape point.
			readDirection(feature) {
				return feature.prop('direction') || 'BOTH';
			}
		}


/*###visiblesource*/
var bgLayer = new here.xyz.maps.layers.MVTLayer({
	name: 'background layer',
	min: 1,
	max: 20,
	remote: {
		url: 'https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt?access_token='+YOUR_ACCESS_TOKEN
	}
});
var navlinkLayer = new here.xyz.maps.layers.TileLayer({
	name: 'Navlink Layer',
	min: 14,
	max: 20,
	// provider to provide navlink
	provider: new MyProvider({
		id: "Navlinks",
		space: "6HMU19KY",
		credentials: {
			access_token: YOUR_ACCESS_TOKEN
		},
		level: 14
	})
})

// setup the Map Display
const display = new here.xyz.maps.Map( document.getElementById("map"), {
    zoomLevel : 17,
    center: {
        latitude:37.796478, longitude:-122.25392
    },
    // add layers to display
    layers: [bgLayer, navlinkLayer]
});

// setup the editor
const editor = new here.xyz.maps.editor.Editor( display );

// add navlink layer to editor, make it editable
editor.addLayer( navlinkLayer );

/**
 * Add a listener for the click-event
 */
editor.addEventListener('pointerup', function(event) {
	$('.contextmenu').remove();

	// react only on right click!
	if(event.button == 2) {
		// supported methods of the features.
		// if the value is null, it will be ignored
		var feature = event.target,
			contextMenuHtml = '<ul class="contextmenu">',
			labels = {
				remove : 'Delete Feature',
				splitLink : 'Split...',
				disconnect : 'Disconnect',
				addShape : 'Add shape point'
			};

		// iterate methods in feature and add them into contextmenu
		for(var i in labels) {
			if(feature && feature[i] && i!= "constructor") {
				contextMenuHtml += '<li rel="' + i + '">' + labels[i] + '</li>';
			}
		}
		// add Show coordinates method to contextmenu
		contextMenuHtml += '<li rel="showCoords">Show Coordinates</li>';
		// universal method independent from the feature
		contextMenuHtml += '</ul>';
		$(editor.container).append(contextMenuHtml);

		// set offset of the contextmenu
		$('.contextmenu').css({
			left : event.mapX,
			top : event.mapY
		});

		// add the clickevent for the items of the menu
		$('.contextmenu li').click(function() {
			var id = $(this).attr('rel');

			// remove existing contextmenu
			$('.contextmenu').remove();

			switch (id) {
				// showCoords is not a method of the features. So we implement it manually.
				case 'showCoords':
					var coord = editor.pixelToGeo({x: event.mapX, y: event.mapY});
					alert('Longitude: ' + coord.longitude + ', Latitude: ' + coord.latitude);
					break;
				case 'addShape':
					feature[id]({x: event.mapX, y: event.mapY});
					break;
				// all other methods are methods of the feature. call them.
				default:
					feature[id]();
			}
		});
	}
});
/*visiblesource###*/

            // used by playground to automatically resize the map on size change
            window.display = display;
		</script>
	</body>
</html>

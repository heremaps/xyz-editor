<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=no">
		<title>XYZ Maps Example: Change road name</title>

	   	<script src="${XYZ_COMMON_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_CORE_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_DISPLAY_PATH}" type="text/javascript" charset="UTF-8" ></script>
	    <script src="${XYZ_EDITOR_PATH}" type="text/javascript" charset="UTF-8" ></script>


		<style type="text/css">
			#map {
				position: absolute;
            	overflow: hidden;
				top: 0;
				left: 0;
				width: 100%;
                height: 100%;
			}
		</style>
	</head>
	<body>
		<div id="map"></div>

		<input id="roadname" type="text">name</input>
		<a id="setname" class="button">Change</a>
		<a id="submitchange" class="button">Submit</a>

		<script>
			//specify credentials
	      	var YOUR_ACCESS_TOKEN = window.parent.YOUR_ACCESS_TOKEN;


			// Create a custom provider.
			class MyProvider extends here.xyz.maps.providers.SpaceProvider {

    			// In this exmaple, all data does already contain desired feature class in the property 'featureClass'.
				detectFeatureClass(feature) {
					return feature.properties.featureClass;
				}


				// ########################       Navlink      ########################
				// Following functions are only necessary if you want to edit Navlink.


				// In addition to Lines, Navlinks have navigation information and are connected to each other to form a road network.
				// Implementing following functions enables you to easily edit Navlinks.


				// This function returns a boolean value to indicate if turn from from-link's shape point to to-link's shape point
				// is restricted.
				// It takes two arguments ('from' and 'to' in this example), they have the same data structure:
				// {
				//     'link': Navlink,
				//     'index': Number
				// }
				// 'link': Navlink to turn from and into.
				// 'index': index of Navlink's shape point, it specifies the shape point where turn takes place.
				// In this example, turn restriction information is stored in from-link, we read this information and determin if the
				// turn is restricted.
				readTurnRestriction(from, to) {
					let turn = from.link.prop('turnRestriction') || {};
					// first shape point is 'start' and the last one is 'end'
					let restrictions = turn[from.index ? 'end' : 'start'] || [];

					return restrictions.indexOf(to.link.id) >= 0;
				};

				// This function stores turn restriction information for turn from from-link to to-link.
				// It takes arguments ('restricted', 'from' and 'to' in this example) similar to that of above function, but its first
				// argument is a boolean value for indicating the turn is (or is not) restricted.
				// In this example, we store turn restriction information as following object in from-link:
				// {
				//     'start': Array<String>  // Array of Navlink id
				//     'end': Array<String>    // Array of Navlink id
				// }
				// 'start' and 'end' refer to first and last shape point of from-link.
				// Their values are array of Navlink ids, you are not allowed to turn from from-link's start (or end) shape point into
				// any Navlink that is in this array.
				writeTurnRestriction(restricted, from, to) {
					let turn = from.link.prop('turnRestriction') || {};
					let node = from.index ? 'end' : 'start';
					let restrictions = turn[node] = turn[node] || [];
					let index = restrictions.indexOf(to.link.id);

					if (restricted) {
						if (index == -1) {
							restrictions.push(to.link.id);
						}
					} else if (index >= 0) {
						restrictions.splice(index, 1);
					}

					from.link.prop('turnRestriction', turn);
				}

				// Indicate if the Navlink is pedestrian only, it's not allowed to turn into a pedestrian only Navlink.
				readPedestrianOnly(feature) {
					return Boolean(feature.prop('pedestrianOnly'));
				}

				// Navlink's direction indicates if the Navlink is a one-way road.
				// Valid values are:
				// 'BOTH': the Navlink is a two-way road.
				// 'START_TO_END': the Navlink is a one-way road with travel direction from its first to last shape point.
				// 'END_TO_START': the Navlink is a one-way road with travel direction from its last to first shape point.
				// It's not allowed to turn into one Navlink with direction 'END_TO_START' at its start (first) shape point or turn into
				// one Navlink with direction 'START_TO_END' at its end (last) shape point.
				readDirection(feature) {
					return feature.prop('direction') || 'BOTH';
				}
			}

			var bgLayer = new here.xyz.maps.layers.MVTLayer({
				name: 'background layer',
				min: 1,
				max: 20,
				remote: {
					url: 'https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt?access_token='+YOUR_ACCESS_TOKEN
				}
			});
			var navlinkLayer = new here.xyz.maps.layers.TileLayer({
				name: 'Navlink Layer',
				min: 14,
				max: 20,
				// Customized provider to provide features
				provider: new MyProvider({
					id: "navlinkProvider",
					space: "6HMU19KY",
					credentials: {
						access_token: YOUR_ACCESS_TOKEN
					},
					level: 14
				}),

				// customize layer style
				style:{
					// define a set of styles by navlink feature attributes
					styleGroups: {
						// highway
						highway: [
							{zIndex:0, type:"Line", stroke:"#AA84A4", strokeWidth:18},
							{zIndex:1, type:"Line", stroke:"#C799E8", strokeWidth:16},
							{zIndex:2, type:"Text", textRef:"properties.name", fill:"#3D272B"}
						],

						// primary road
						primary: [
							{zIndex:0, type:"Line", stroke:"#AA84A4", strokeWidth:18},
							{zIndex:1, type:"Line", stroke:"#C799E8", strokeWidth:14},
							{zIndex:2, type:"Text", textRef:"properties.name", fill:"#3D272B"}
						],

						// Residential road
						residential: [
							{zIndex:0, type:"Line", stroke:"#F4F288", strokeWidth:11},
							{zIndex:1, type:"Line", stroke:"#CD8353", strokeWidth:8},
							{zIndex:2, type:"Text", textRef:"properties.name", fill:"#3D272B"}
						],

						// Trail
						path: [
							{zIndex:0, type:"Line", stroke:"#FFFFFF", strokeWidth:8},
							{zIndex:2, type:"Text", textRef:"properties.name", fill:"#3D272B"}
						]
					},

					assign: function(feature, zoomlevel){
						let prop = feature.properties;
						return prop.type;
					}
				}
			});

			// setup the Map Display
			const display = new here.xyz.maps.Map( document.getElementById("map"), {
			        zoomLevel : 18,
					center: { longitude: -122.2281, latitude: 37.778747},
					behaviour: {
						pitch: true
					},
			        // add layers to display
			        layers: [bgLayer, navlinkLayer]
			    });

			// setup the editor
			const editor = new here.xyz.maps.editor.Editor( display );

			// add navlink layer to editor, make layers editable
			editor.addLayer( navlinkLayer );

/*###visiblesource*/
/**
 * This example shows how to get and set the name of a road.
 *
 * User could click on a road to display a tag with name of this road. name is not committed
 */
var roadnameTag = document.querySelector("#roadname");
var setnameButton = document.querySelector("#setname");
var submitButton = document.querySelector("#submitchange");
var navlink;

setnameButton.onclick = function(){
	var attr = {'name': roadnameTag.value};
	// set new road name
	navlink && navlink.prop(attr);
};

submitButton.onclick = function(){
	navlink = null;
	// submit changes
	editor.submit();
};

/**
 * Add a listener for the click-event
 */
editor.addEventListener('pointerup', function(event) {
	// leftclick!
	if(event.button == 0) {
		var feature = event.target;

		if(feature && feature.geometry.type == "LineString") {
			var attrs = feature.prop();

			roadnameTag.value = attrs.name;

			navlink = feature;
		}
	}
});
/*visiblesource###*/

            // used by playground to automatically resize the map on size change
            window.display = display;
		</script>
	</body>
</html>
